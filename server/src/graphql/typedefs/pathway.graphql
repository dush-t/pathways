type Pathway {
    id: String
    name: String
    steps: [Step] @relation(name: "HAS_PARENT_PATHWAY", direction: "IN")
}

type Content {
    id: String
    title: String
    content: String
}

type Step {
    id: String
    name: String
    time: Int
    index: Int
    isPathway: Boolean
    pathway: Pathway @relation(name: "INCLUDES", direction: "OUT")
    content: Content @relation(name: "HAS_CONTENT", direction: "OUT")
}

enum _StepOrdering {
    index_asc
}

input StepPayload {
    id: String!
    name: String
    time: Int
    index: Int
    isPathway: Boolean!
    typeId: String
}

type StatusMessage {
    status: String!
    message: String
}

type Mutation {
    createUpdatePathway(
        id: String!
        name: String!
        steps: [StepPayload]!
    ): StatusMessage
    deletePathway(
        id: String!
        steps: [StepPayload]!
        whole: Boolean!
    ): StatusMessage
    createUpdateContent(
        id: String!
        title: String
        content: String
    ): StatusMessage
    forkContent(
        id: String!
        title: String
        content: String
        stepId: String!
    ): StatusMessage
}
